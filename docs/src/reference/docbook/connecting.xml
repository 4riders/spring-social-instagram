<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="connecting"
		xmlns:xlink="http://www.w3.org/1999/xlink">
	<title>Configuring Instagram Connectivity</title>		

	<para>
		Spring Social's <classname>ConnectController</classname> works with one or more provider-specific <classname>ConnectionFactory</classname>s to exchange authorization details with the provider and to create connections. 
		Spring Social Instagram provides <classname>InstagramConnectionFactory</classname>, a <classname>ConnectionFactory</classname> for creating connections with Instagram.
	</para>

	<para>
		So that <classname>ConnectController</classname> can find <classname>InstagramConnectionFactory</classname>, it must be registered with a <classname>ConnectionFactoryRegistry</classname>.
		The following class constructs a <classname>ConnectionFactoryRegistry</classname> containing a <interfacename>ConnectionFactory</interfacename> for Instagram using Spring's Java configuration style: 		
	</para>

	<programlisting language="java"><![CDATA[
@Configuration
public class ConnectionFactoryConfig {
	
    @Bean
    public ConnectionFactoryLocator connectionFactoryLocator() {
        ConnectionFactoryRegistry registry = new ConnectionFactoryRegistry();
        registry.addConnectionFactory(new InstagramConnectionFactory(InstagramClientId, InstagramClientSecret));
        return registry;
    }

    @Value("${Instagram.clientId}")
    private String InstagramClientId;
	
    @Value("${Instagram.clientSecret}")
    private String InstagramClientSecret;
	
}
]]></programlisting>

	<para>
		Here, a Instagram connection factory is registered with <classname>ConnectionFactoryRegistry</classname> via the <methodname>addConnectionFactory()</methodname> method.
		If we wanted to add support for connecting to other providers, we would simply register their connection factories here in the same way as <classname>InstagramConnectionFactory</classname>.
		Because consumer keys and secrets may be different across environments (e.g., test, production, etc) it is recommended that these values be externalized.
		Therefore, they are wired in with <code>@Value</code> as property placeholder values to be resolved by Spring's property placeholder support.
	</para>	

	<para>
		Optionally, you may also configure <classname>ConnectionFactoryRegistry</classname> and <classname>InstagramConnectionFactory</classname> in XML:
	</para>

	<programlisting language="xml"><![CDATA[
<bean id="connectionFactoryLocator" class="org.springframework.social.connect.support.ConnectionFactoryRegistry">
    <property name="connectionFactories">
        <list>
            <bean class="org.springframework.social.Instagram.connect.InstagramConnectionFactory">
                <constructor-arg value="${Instagram.clientId}" />
                <constructor-arg value="${Instagram.clientSecret}" />				
            </bean>
        </list>
    </property>
</bean>]]>
	</programlisting>	

	<para>
		This is functionally equivalent to the Java-based configuration of <classname>ConnectionFactoryRegistry</classname> shown before.
		The only casual difference is that the connection factories are injected as a list into the <code>connectionFactories</code> property rather than with the <methodname>addConnectionFactory()</methodname> method.
	</para>	

	<para>
		Refer to <ulink url="http://static.springsource.org/spring-social/docs/1.0.x/reference/html/connecting.html">Spring Social's reference documentation</ulink> for complete details on configuring <classname>ConnectController</classname> and its dependencies.
	</para>

</chapter>

